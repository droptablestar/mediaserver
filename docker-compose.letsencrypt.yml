version: "3.7"

services:
  plex:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.plex.tls.certresolver: prod
      traefik.http.routers.plex.rule: Host(`${PLEX_HOST}`)
      traefik.http.services.plex.loadbalancer.server.port: 32400
      traefik.http.services.plex.loadbalancer.server.scheme: http

  # https://docs.linuxserver.io/images/docker-jellyfin
  jellyfin:
    image: ghcr.io/linuxserver/jellyfin@sha256:5dc17ccc851e90953e4c519521933af51aeedc961663a8396b516a9e232c2ac7
    restart: unless-stopped
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TZ}"
      JELLYFIN_PublishedServerUrl: "${JELLYFIN_HOST}"
    networks:
      - default
    volumes:
      - "${CONFIG_DIR}/jellyfin:/config"
      - "${MEDIA_DIR}:/media"

  # https://docs.linuxserver.io/images/docker-jellyfin

  jellyfin:
    image: ghcr.io/linuxserver/jellyfin@sha256:5dc17ccc851e90953e4c519521933af51aeedc961663a8396b516a9e232c2ac7
    restart: unless-stopped
    environment:
      PUID: "${PUID}"
      PGID: "${PGID}"
      TZ: "${TZ}"
      JELLYFIN_PublishedServerUrl: "${JELLYFIN_HOST}"
    networks:
      - default
    volumes:
      - "${CONFIG_DIR}/jellyfin:/config"
      - "${MEDIA_DIR}:/media"

  nzbget:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.nzbget.tls.certresolver: prod
      traefik.http.routers.nzbget.rule: Host(`${NZBGET_HOST}`)
      traefik.http.routers.nzbget.middlewares: hsts-header, basicauth
      traefik.http.routers.nzbget-api.rule: Host(`${NZBGET_HOST}`) && PathPrefix(`/{jsonrpc:([^\/:]*:[^\/:]*/)?jsonrpc}`,`/{xmlrpc:([^\/:]*:[^\/:]*/)?xmlrpc}`)
      traefik.http.routers.nzbget-api.middlewares: hsts-header

  sonarr:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.sonarr.tls.certresolver: prod
      traefik.http.routers.sonarr.rule: Host(`${SONARR_HOST}`)
      traefik.http.routers.sonarr.middlewares: hsts-header, basicauth
      traefik.http.routers.sonarr-api.rule: Host(`${SONARR_HOST}`) && PathPrefix(`/api`)
      traefik.http.routers.sonarr-api.middlewares: hsts-header
      
  radarr:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.radarr.tls.certresolver: prod
      traefik.http.routers.radarr.rule: Host(`${RADARR_HOST}`)
      traefik.http.routers.radarr.middlewares: hsts-header, basicauth
      traefik.http.routers.radarr-api.rule: Host(`${RADARR_HOST}`) && PathPrefix(`/api`)
      traefik.http.routers.radarr-api.middlewares: hsts-header
      traefik.http.services.radarr.loadbalancer.passHostHeader: true

  nzbhydra:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.nzbhydra.tls.certresolver: prod
      traefik.http.routers.nzbhydra.rule: Host(`${NZBHYDRA_HOST}`)
      traefik.http.routers.nzbhydra.middlewares: hsts-header, basicauth
      traefik.http.routers.nzbhydra-api.rule: Host(`${NZBHYDRA_HOST}`) && PathPrefix(`/api`,`/getnzb`,`/gettorrent`,`/rss`,`/torznab/api`)
      traefik.http.routers.nzbhydra-api.middlewares: hsts-header

  ombi:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.ombi.tls.certresolver: prod
      traefik.http.routers.ombi.rule: Host(`${OMBI_HOST}`)
      traefik.http.routers.ombi.middlewares: hsts-header, basicauth

  duplicati:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.duplicati.tls.certresolver: prod
      traefik.http.routers.duplicati.rule: Host(`${DUPLICATI_HOST}`)
      traefik.http.routers.duplicati.middlewares: hsts-header, basicauth

  netdata:
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.netdata.tls.certresolver: prod
      traefik.http.routers.netdata.rule: Host(`${NETDATA_HOST}`)
      traefik.http.routers.netdata.middlewares: hsts-header, basicauth

  # elrond:
  #   labels:
  #     traefik.enable: "true"
  #     traefik.docker.network: mediaserver_default
  #     traefik.http.routers.netdata.tls.certresolver: prod
  #     traefik.http.routers.netdata.rule: Host(`${ELROND_HOST}`)
  #     traefik.http.routers.netdata.middlewares: hsts-header, basicauth

  # web:
  #   labels:
  #     traefik.enable: "true"
  #     traefik.docker.network: mediaserver_default
  #     traefik.http.routers.netdata.tls.certresolver: prod
  #     traefik.http.routers.netdata.rule: Host(`${WEB_HOST}`)
  #     traefik.http.routers.netdata.middlewares: hsts-header

  # https://hub.docker.com/_/traefik/
  traefik:
    image: traefik:v2.2.8
    restart: unless-stopped
    environment:
      TZ: "${TZ}"
    networks:
      - default
    ports:
      - 80:80/tcp
      - 443:443/tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ${CONFIG_DIR}/traefik:/etc/traefik:rw
      - /var/log/docker:/var/log
    command:
      - "--log.level=INFO"
#      - "--log.filePath=/var/log/traefik/traefik.log"
      - "--accessLog.filePath=/var/log/traefik/access.log"
#      - "--accessLog.filters.statusCodes=400-499"
      - "--api=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesResolvers.prod.acme.tlschallenge=true"
      - "--certificatesresolvers.prod.acme.storage=/etc/traefik/acme.json"
      - "--certificatesresolvers.prod.acme.email=${ACME_EMAIL}"
      - "--certificatesresolvers.prod.acme.caserver=https://acme-v02.api.letsencrypt.org/directory"
      # - "--certificatesResolvers.staging.acme.tlschallenge=true"
      # - "--certificatesresolvers.staging.acme.storage=/etc/traefik/acme.json"
      # - "--certificatesresolvers.staging.acme.email=${ACME_EMAIL}"
      # - "--certificatesresolvers.staging.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"
    labels:
      traefik.enable: "true"
      traefik.docker.network: mediaserver_default
      traefik.http.routers.traefik.tls.certresolver: prod
      traefik.http.routers.traefik.rule: Host(`${TRAEFIK_HOST}`)
      traefik.http.routers.traefik.middlewares: hsts-header, basicauth
      traefik.http.routers.traefik.service: api@internal
      traefik.http.middlewares.basicauth.basicauth.usersfile: /etc/traefik/.htpasswd
      traefik.http.middlewares.hsts-header.headers.customResponseHeaders.Strict-Transport-Security: "max-age=63072000"

  portainer:
    image: portainer/portainer-ce:2.11.0
    command: -H unix:///var/run/docker.sock
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${CONFIG_DIR}/portainer:/data
    labels:
      # Frontend
      traefik.enable: true
      traefik.docker.network: mediaserver_default
      traefik.http.routers.frontend.rule: Host(`${PORTAINER_HOST}`)
      traefik.http.routers.frontend.entrypoints: websecure
      traefik.http.routers.frontend.service: frontend
      traefik.http.routers.frontend.tls.certresolver: prod
#      traefik.http.routers.frontend.middlewares: hsts-header, basicauth
      traefik.http.services.frontend.loadbalancer.server.port: 9000
      
# http:
#   services:
#     aragorn:
#       loadBalancer:
#         servers:
#           - url: "http://192.168.1.179/"




      # traefik.http.routers.aragorn.tls.certresolver: prod
      # traefik.http.routers.aragorn.rule: Host(`${ARAGORN_HOST}`)
      # # traefik.http.routers.aragorn.middlewares: hsts-header, basicauth
      # # traefik.http.routers.aragorn.service: api@internal
      # traefik.http.services.aragorn.loadbalancer.servers.url: "http://192.168.1.179/"
